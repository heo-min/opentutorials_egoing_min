2016년 12월 16일
수업내용

1. Revert

1) 버전을 삭제하지 않은 채로 이전 소스 작업으로 복구하고 싶을 경우
   Revert commit을 사용한다.

2) 특정의 버젼으로 복구하고자 할때 그 사이 일련의 버젼들을 건너뛰고 Revert를 하게 될 경우
   충돌이 일어날 수 있기 때문에 순차적으로 Revert하는 것을 권장

* 1. Reset  - 선택한 버젼의 상태로 돌아가는것.  (버젼을 지운다)
  2. Revert - 선택한 버젼을 취소해서 이전 상태로 돌리는 것. (버젼을 유지한다.)


2. Branch - 작업을 분기하여 사용
 
1) new Branch 새로 분기점을 생성하여 사용한다
	-> 선택한 분기점을 기준으로 작업이 진행 된다.

2) 병합의 경우 기준이 될 분기점을 선택 후 병합할 분기점을 우클릭 한뒤 
   Merge newBranch into current branch를 클릭 한다.
   
   우측 하단의 작업 변경 내용을 확인하면 병합전 분기점의 작업 내용을 확인 할 수 있다.
   
3) 충돌의 경우
   ex:)
   <<<<<<< HEAD	-> 기준의 되는 브랜치
			<li>Branch</li>
   ======= --> 기준점
			<li>브랜치</li>
   >>>>>>> TEST2 -> 병합된 브랜치
	
   -> 작업자가 소스의 충돌을 해결 했을 경우 sourcetree에서 Resolve conflict를 클릭하여
      git에게 충돌이 해결 되었음을 알린다.

4) 충돌의 최소화
   - master 분기점에서의 작업을 진행하고 새로 생긴 newBranch에서 작업을 진행 할 때 
     정기적으로 master의 작업 내용을 병합하는 방식으로 작업을 진행한다
   - 기준은 newBranch가 되고 병합할 소스는 master가 되는 것.
   - 병합 하더라도 master의 소스 내용을 변화가 없고 추후 시간이 오래 지난 뒤 충돌을 최소화 하는 방법으로
     이 방법론을 채택한다.